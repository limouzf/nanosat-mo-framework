===========================
Sobel Filter Implementation
===========================
As said in part "Action", to apply the sobel filter, three steps must be performed:

.. contents:: Table of contents

byteArrToBufferedImage
----------------------
First step is to convert the raw byte data into a **BufferedImage**. Our byte is here defined as ``something`` but can be seen as the ImageData.
Then we have to make this ImageData a readable input for ``BufferedImage`` fonction. 
The ByteArrayInputStream class of the java.io package can be used to read an array of input data (in bytes). And then all that left to do is 
to build our BufferedImage from the InputStream

.. code-block:: java
   :linenos:

    public BufferedImage byteArrToBufferedImage(byte[] something) throws IOException {
      InputStream is = new ByteArrayInputStream(something);
      BufferedImage bi = ImageIO.read(is);
      return bi;
    }

At the end, the action needs to return the BufferedImage in order to grayscale this latter.

How to grayscale that image
---------------------------

.. code-block: java
   :linenos:

   public BufferedImage grayscale(BufferedImage inputimage) {
    LOGGER.log(Level.INFO, "BeginGrayscale");
    
    BufferedImage grayscaleoutputimage = new BufferedImage(inputimage.getWidth(), inputimage.getHeight(), inputimage.getType());  
    //Taking the last saved image (standart image) as an input
    for (int i=0; i<inputimage.getHeight(); i++){
      for (int j=0; j<inputimage.getWidth(); j++){
        float r = new Color(inputimage.getRGB(j, i)).getRed();
        float g = new Color(inputimage.getRGB(j, i)).getGreen();
        float b = new Color(inputimage.getRGB(j, i)).getBlue();
        int grayScaled = (int)(r+g+b)/3;
        grayscaleoutputimage.setRGB(j, i, new Color(grayScaled, grayScaled, grayScaled).getRGB());
      }
    }
    return grayscaleoutputimage;
   }

Application of Sobel Filter
---------------------------



